"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const fs = require("node:fs");
const aws_1 = require("../../aws");
const log_1 = require("../../log");
const Tarballs = require("../../tarballs");
const upload_util_1 = require("../../upload-util");
const util_1 = require("../../util");
class UploadMacos extends core_1.Command {
    static description = 'upload macos installers built with pack:macos';
    static flags = {
        root: core_1.Flags.string({ char: 'r', default: '.', description: 'path to oclif CLI root', required: true }),
        targets: core_1.Flags.string({
            char: 't',
            description: 'comma-separated targets to upload (e.g.: darwin-x64,darwin-arm64)',
        }),
    };
    async run() {
        const { flags } = await this.parse(UploadMacos);
        const buildConfig = await Tarballs.buildConfig(flags.root, { targets: flags?.targets?.split(',') });
        const { config, dist, s3Config } = buildConfig;
        const S3Options = {
            ACL: s3Config.acl || 'public-read',
            Bucket: s3Config.bucket,
        };
        const cloudKeyBase = (0, upload_util_1.commitAWSDir)(config.version, buildConfig.gitSha, s3Config);
        const upload = async (arch) => {
            const templateKey = (0, upload_util_1.templateShortKey)('macos', {
                arch,
                bin: config.bin,
                sha: buildConfig.gitSha,
                version: config.version,
            });
            const cloudKey = `${cloudKeyBase}/${templateKey}`;
            const localPkg = dist(`macos/${templateKey}`);
            if (fs.existsSync(localPkg))
                await aws_1.default.s3.uploadFile(localPkg, { ...S3Options, CacheControl: 'max-age=86400', Key: cloudKey });
            else
                this.error('Cannot find macOS pkg', {
                    suggestions: ['Run "oclif pack macos" before uploading'],
                });
        };
        const arches = (0, util_1.uniq)(buildConfig.targets.filter((t) => t.platform === 'darwin').map((t) => t.arch));
        await Promise.all(arches.map((a) => upload(a)));
        (0, log_1.log)(`done uploading macos pkgs for v${config.version}-${buildConfig.gitSha}`);
    }
}
exports.default = UploadMacos;
